{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\n// Withdraw funds\n// Set a minimum funding value in USD\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe{\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50*1e18;\n    // 21,415 GAS - constant\n    // 23,515 gas - non-constant\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    // function callMeRightAway(){\n\n    // }\n    address public immutable i_owner;\n    // 21,508 gas - immutable\n    // 23,644 gas - non-immutable\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress){\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // Limit tinkering / triaging to 20 min\n    // Take at least 15 min yourself -> or be 100% sure\n    // you exhausted all options\n\n    // 1. Tinker and try to pinpoint exactly what's goint on\n    // 2. Google the exact error\n    // 2.5 Got to our Github repo discussions and/or updates\n    // 3 Ask a question on a forum like Stack Exchange ETH and Stack Overlow\n\n    function fund() public payable{\n        // Want to be able to set a minimum fund amount in USD\n        // 1. How do we send ETH to this contract?\n\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"Didn't send enough!\"); //1e18 == 1*10 ** 18 == weig\n        // 18 decimals\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] += msg.value;\n        // What is reverting?\n        // undo any action before, and send remaining gas back\n    }\n\n    function Withdraw() public onlyOwner{\n        // require(msg.sender == owner, \"Sender is not owner!\");\n        for(uint256 idx = 0; idx < funders.length; idx++){\n            address funder = funders[idx];\n            addressToAmountFunded[funder] = 0;\n        }\n        // reset the array\n        funders = new address[](0);\n        // actually withdraw the funds\n\n        // transfer\n        // msg.sender = address\n        // payable(msg.sender) = payable address\n        // payable(msg.sender).transfer(address(this).balance);\n        \n        // send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send failed\");\n\n        // call\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    modifier onlyOwner{\n        // require(msg.sender==i_owner,\"Sender is not owner!\");\n        if(msg.sender!=i_owner){revert NotOwner();}\n        _;\n    }\n\n    // What happens if someone sends this contract ETH without calling the fund function\n\n    receive() external payable{\n        fund();\n    }\n\n    fallback() external payable{\n        fund();\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n\r\nlibrary PriceConverter{\r\n\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n        // ABI\r\n        // Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\r\n        (,int256 price,,,) = priceFeed.latestRoundData();\r\n        // ETH in terms of USD\r\n        // 3000.00000000\r\n        return uint256(price * 1e10); // 1**10 \r\n    }\r\n\r\n    // function getVersion() internal view returns (uint256){\r\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\r\n    //     return priceFeed.version();\r\n    // } \r\n\r\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice*ethAmount)/1e18;\r\n        return  ethAmountInUsd;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}